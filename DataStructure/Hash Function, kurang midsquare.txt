#include <stdio.h>
#include <math.h>
#define TABLESIZE 5

int division(int key){
    return key%TABLESIZE;
}

int digitExtraction(int key, int positions[], int size){
    char buffer[100];
    sprintf(buffer, "%d", key);
    
    int extractedValue = 0;
    for(int i=0; i<size; i++){
        extractedValue = extractedValue * 10 + (buffer[positions[i]-1] - '0');
    }
    return extractedValue;
}

int folding(int key){
    int sum = 0;
    // int temp = key;
    
    //Partition in a group of 2
    while(key > 0){
        sum = sum + key%100; //sum += key%100
        key = key / 100;    //key /= 100
    }
    return sum;
}

int rotating(int key){
    int remainder = 0;
    int reverse = 0;
    
    while(key != 0){
        remainder = key % 10;
        reverse = reverse * 10 + remainder;
        key = key / 10;
    }
    return reverse;
}

int main(){
    int key = 14568;
    
//============================================================
    //Division
    int divisionNumber = division(key);
    printf("Division Number: %d\n", divisionNumber);
    
//============================================================
    //Digit Extraction
    int positions[] = {1, 3, 5};
    int size = sizeof(positions) / sizeof(positions[0]);
    
    int extractedNumber = digitExtraction(key, positions, size);
    printf("Extracted Number: %d\n", extractedNumber);
    
//============================================================
    //Folding
    int foldedNumber = folding(key);
    printf("Folded Number: %d\n", foldedNumber);

//============================================================
    //Rotating Hash
    int rotatedNumber = rotating(key);
    printf("Rotated Number: %d\n", rotatedNumber); 
    
    return 0;
}






