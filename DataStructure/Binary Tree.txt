// Tree traversal in C

#include <stdio.h>
#include <stdlib.h>

typedef struct node {
  int item;
  struct node* left;
  struct node* right;
}node;

// Create a new Node
node* create(int value) {
  node* newNode = malloc(sizeof(node));
  newNode->item = value;
  newNode->left = NULL;
  newNode->right = NULL;

  return newNode;
}

// Inorder traversal
void inorderTraversal(node* root) {
  if (root == NULL) return;
  inorderTraversal(root->left);
  printf("%d ", root->item);
  inorderTraversal(root->right);
}

// Preorder traversal
void preorderTraversal(node* root) {
  if (root == NULL) return;
  printf("%d ", root->item);
  preorderTraversal(root->left);
  preorderTraversal(root->right);
}

// Postorder traversal
void postorderTraversal(node* root) {
  if (root == NULL) return;
  postorderTraversal(root->left);
  postorderTraversal(root->right);
  printf("%d ", root->item);
}

int main() {
  node* node1 = create(1);
  node* node2 = create(2);
  node* node3 = create(3);
  node* node4 = create(4);
  node* node5 = create(5);
  node* node6 = create(6);
  node* node7 = create(7);
  
  node1->left = node2;
  node1->right = node3;
  node2->left = node4;
  node2->right = node5;
  node3->left = node6;
  node3->right = node7;

  printf("Traversal of the inserted binary tree \n");
  printf("Inorder traversal \n");
  inorderTraversal(node1);

  printf("\nPreorder traversal \n");
  preorderTraversal(node1);


  printf("\nPostorder traversal \n");
  postorderTraversal(node1);

}